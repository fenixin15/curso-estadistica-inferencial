fitdistr(muestra.poisson, densfun = "poisson")
fitdistr(muestra.poisson, densfun = "poisson")[[1]]
fitdistr(muestra.poisson, densfun = "poisson")
fitdistr(muestra.poisson, densfun = "poisson")[[2]]
(estimación.lambda = mean(muestra.poisson))
(estimación.error.típico= sqrt(estimación.lambda/50))
fitdistr(muestra.poisson,densfun = "normal")
* En primer lugar elegimos las flores de la muestra:
```{r}
set.seed(1000)
muestra.iris = sample(1:150,30,replace=TRUE)
```
</div>
* En primer lugar elegimos las flores de la muestra:
```{r}
set.seed(1000)
muestra.iris = sample(1:150,30,replace=TRUE)
```
set.seed(1000)
set.seed(1000)
* En primer lugar elegimos las flores de la muestra:
```{r}
set.seed(1000)
muestra.iris = sample(1:150,30,replace=TRUE)
```
muestra.iris = sample(1:150,30,replace=TRUE)
muestra.iris
unique(muestra.iris)
iris[muestra.iris,]
* En primer lugar elegimos las flores de la muestra:
```{r}
set.seed(1000)
muestra.iris = sample(1:150,30,replace=TRUE)
```
A continuación calculamos las longitudes del pétalo de las flores de nuestra muestra:
```{r}
long.pétalo.muestra = iris[muestra.iris,]$Petal.Length
```
long.pétalo.muestra = iris[muestra.iris,]$Petal.Length
long.pétalo.muestra
* En primer lugar elegimos las flores de la muestra:
```{r}
set.seed(1000)
muestra.iris = sample(1:150,30,replace=TRUE)
```
A continuación calculamos las longitudes del pétalo de las flores de nuestra muestra:
```{r}
long.pétalo.muestra = iris[muestra.iris,]$Petal.Length
```
Un intervalo de confianza al 95% de confianza para las longitudes del pétalo sería:
```{r}
t.test(long.pétalo.muestra,conf.level=0.95)$conf.int
```
t.test(long.pétalo.muestra,conf.level=0.95)$conf.int
En primer lugar, generamos la población de valores:
```{r}
set.seed(2020)
valores.población=rnorm(10^7)
```
Seguidamente, hallamos la media poblacional:
```{r}
mu=mean(valores.población)
```
mu=mean(valores.población)
mu
## Intervalo de confianza para la media basado en la t de Student en `R`
<div class="example">
Para hallar 200 muestras, usaremos la función `replicate` de `R` que nos permite ejecutar una misma función las veces que le indiquemos:
```{r}
muestras=replicate(200, sample(Poblacion,50,replace=TRUE))
```
muestras=replicate(200, sample(Poblacion,50,replace=TRUE))
muestras=replicate(200, sample(valores.población,50,replace=TRUE))
muestras
dim(muestras)
muestras[1,]
## Intervalo de confianza para la media basado en la t de Student en `R`
<div class="example">
Para visualizar mejor los aciertos, vamos a dibujar los intervalos apilados en un gráfico, donde aparecerán en azul claro los que aciertan y en rojo los que no aciertan.
```{r,fig=TRUE}
plot(1,type="n",xlim=c(-0.8,0.8),ylim=c(0,200),xlab="Valores",ylab="Repeticiones",main="")
seg.int=function(i){
color="light blue";
if((mu<ICs[1,i]) | (mu>ICs[2,i])){color = "red"}
segments(ICs[1,i],i,ICs[2,i],i,col=color,lwd=2)
}
sapply(1:200,FUN=seg.int)
abline(v=mu,lwd=2)
```
## Intervalo de confianza para la media basado en la t de Student en `R`
<div class="example">
Para visualizar mejor los aciertos, vamos a dibujar los intervalos apilados en un gráfico, donde aparecerán en azul claro los que aciertan y en rojo los que no aciertan.
```{r,fig=TRUE}
plot(1,type="n",xlim=c(-0.8,0.8),ylim=c(0,200),xlab="Valores",ylab="Repeticiones",main="")
seg.int=function(i){
color="light blue";
if((mu<ICs[1,i]) | (mu>ICs[2,i])){color = "red"}
segments(ICs[1,i],i,ICs[2,i],i,col=color,lwd=2)
}
sapply(1:200,FUN=seg.int)
abline(v=mu,lwd=2)
```
seg.int=function(i){
color="light blue";
if((mu<ICs[1,i]) | (mu>ICs[2,i])){color = "red"}
segments(ICs[1,i],i,ICs[2,i],i,col=color,lwd=2)
}
sapply(1:200,FUN=seg.int)
ICs= apply(muestras,FUN=IC.t,MARGIN=2)
IC.t= function(X){t.test(X)$conf.int}
ICs= apply(muestras,FUN=IC.t,MARGIN=2)
seg.int=function(i){
color="light blue";
if((mu<ICs[1,i]) | (mu>ICs[2,i])){color = "red"}
segments(ICs[1,i],i,ICs[2,i],i,col=color,lwd=2)
}
sapply(1:200,FUN=seg.int)
sapply(1:200,FUN=seg.int);
```{r,fig=TRUE,results='hide',echo=FALSE}
plot(1,type="n",xlim=c(-0.8,0.8),ylim=c(0,200),xlab="Valores",
ylab="Repeticiones",main="")
seg.int=function(i){
color="light blue";
if((mu<ICs[1,i]) | (mu>ICs[2,i])){color = "red"}
segments(ICs[1,i],i,ICs[2,i],i,col=color,lwd=2)
}
sapply(1:200,FUN=seg.int);
abline(v=mu,lwd=2)
```
plot(1,type="n",xlim=c(-0.8,0.8),ylim=c(0,200),xlab="Valores",
ylab="Repeticiones",main="")
<div class="example">
Hallemos un intervalo de confianza para la proporción de flores con especie "setosa" dada una muestra de 60 flores.
Sabemos que la proporción real $p$ en este caso vale $p=\frac{50}
<div class="example">
El número de flores de especie setosa será:
```{r}
número.flores.setosa=length(muestra.flores.prop$Species=="setosa")
```
número.flores.setosa=length(muestra.flores.prop$Species=="setosa")
muestra.flores.prop = iris[flores.prop,]
set.seed(1000)
flores.prop = sample(1:150,60,replace=TRUE)
muestra.flores.prop = iris[flores.prop,]
head(muestra.flores.prop,10)
número.flores.setosa=length(muestra.flores.prop$Species=="setosa")
<div class="example">
El número de flores de especie setosa será:
```{r}
(número.flores.setosa=length(muestra.flores.prop$Species=="setosa"))
```
(número.flores.setosa=length(muestra.flores.prop$Species=="setosa"))
muestra.flores.prop$Species=="setosa")
muestra.flores.prop$Species=="setosa"
table(muestra.flores.prop$Species=="setosa")
(número.flores.setosa=table(muestra.flores.prop$Species=="setosa")[2])
library(epitools)
shapiro.test(iris$Sepal.Length)
shapiro.test(iris$Sepal.Width)
shapiro.test(iris$Petal.Length)
shapiro.test(iris$Petal.Width)
shapiro.test(iris$Sepal.Width)
hist(iris$Sepal.Width)
hist(iris$Sepal.Length)
ks.test(iris$Sepal.Width,"pnorm",mean(iris$Sepal.Width),sd(iris$Sepal.Width))
hist(iris$Sepal.Width)
set.seed(1000)
flores.elegidas = sample(1:150,60,replace=TRUE)
muestra.flores.prop = iris[flores.elegidas,]
head(muestra.flores.prop,10)
amplitud.sépalo.muestra = iris[flores.elegidas,]$Sepal.Width
Hallemos los valores de la amplitud del sépalo para las flores de nuestra muestra:
```{r}
(amplitud.sépalo.muestra = iris[flores.elegidas,]$Sepal.Width)
```
library(EnvStats)
shapiro.test(iris$Petal.Length)
set.seed(42)
X=replicate(1000, var(sample,iris[flores.elegidas,]$Petal.Length))
```{r}
set.seed(42)
X=replicate(1000, var(sample(iris[flores.elegidas,]$Petal.Length,replace=TRUE)))
```
X
set.seed(42)
X=replicate(1000, var(sample(iris[flores.elegidas,]$Petal.Length,replace=TRUE)))
X
(1-0.95)/2
(1+0.95)/2
library(boot)
<div class="example">
Vamos a aplicar la función `boot` al ejemplo anterior:
```{r}
library(boot)
boot(iris[flores.elegidas,]$Petal.Length,var,1000)
```
boot(iris[flores.elegidas,]$Petal.Length,var,1000)
library(boot)
var.boot=function(X,índices){var(X[índices])}
boot(iris[flores.elegidas,]$Petal.Length,var.boot,1000)
boot.ci(simulación)
simulación=boot(iris[flores.elegidas,]$Petal.Length,var.boot,1000)
boot.ci(simulación)
install.packages("BSDA")
install.packages("TeachingDemos")
knitr::opts_chunk$set(echo = TRUE)
pbinom(35,50,0.5)
pbinom(30,50,0.5)
mean(iris$Sepal.Length)
set.seed(230)
flores.muestra=sample(1:150,40,replace=TRUE)
length(unique(flores.muestra))
flores.muestra
long.sépalo.muestra=iris[flores.elegidas,]$Sepal.Length
(long.sépalo.muestra=iris[flores.elegidas,]$Sepal.Length)
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$pvalue
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$p-value
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$p.value
round(t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$mean,3)
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$mean
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[1]]
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[2]]
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[3]]
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[4]]
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[5]]
round(t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$`mean of x`,3)
round(t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[5]],3)
round(t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$t,3)
round(t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[1]],3)
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[4]]
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$conf.level
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$`conf.level`
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[4]]
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")[[4]]
?t.test
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$p.value
t.test(long.sépalo.muestra,mu=5.5,alternative = "greater")$conf.int
iris[51:100,]
muestra.setosa$Petal.Length
set.seed(45)
flores.elegidas.setosa = sample(1:50,40,replace=TRUE)
flores.elegidas.versicolor = sample(51:100,40,replace=TRUE)
muestra.setosa = iris[flores.elegidas.setosa,]
muestra.versicolor = iris[flores.elegidas.versicolor,]
muestra.setosa$Petal.Length
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,alternative="two.sided")
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,alternative="two.sided")[[1]]
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,alternative="two.sided")[[2]]
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,alternative="two.sided")[[3]]
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,alternative="two.sided")[[4]]
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,alternative="two.sided")[[5]]
t.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length,
alternative="two.sided",var.equal = TRUE)
mean(iris[iris$Species=="setosa",]$Sepal.Length)
mean(iris[iris$Species=="versicolor",]$Sepal.Length)
mean(iris[iris$Species=="versicolor",]$Petal.Length)
mean(iris[iris$Species=="setosa",]$Petal.Length)
mean(iris[iris$Species=="virginica",]$Petal.Length)
mean(iris[iris$Species=="virginica",]$Setal.Length)
mean(iris[iris$Species=="virginica",]$Sepal.Length)
muestra.virginica = iris[flores.elegidas.virginica,]
set.seed(100)
flores.elegidas.virginica=sample(101:150,40,replace=TRUE)
muestra.virginica = iris[flores.elegidas.virginica,]
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")
[[1]]
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")[[1]]
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")[[2]]
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")[[3]]
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")[[4]]
t.test(muestra.virginica$Sepal.Length,muestra.virginica$Petal.Length,paired=TRUE,alternative="greater")[[5]]
t.test(long.sépalo.muestra,mu=5.8,alternative = "greater")$conf.int
t.test(long.sépalo.muestra,mu=5.8,alternative = "greater")$conf.int
t.test(long.sépalo.muestra,mu=5.8,alternative = "greater")
t.test(long.sépalo.muestra,mu=5.7,alternative = "greater")
t.test(long.sépalo.muestra,mu=5.7,alternative = "greater")$conf.int
birthwt
hist(birthwt$age)
hist(birthwt$smoke)
hist(birthwt$lwt)
shapiro.test(birthwt$lwt)
?birthwt
?wilcox.test
?birthwt
birthwt$low
birthwt$ptl
birthwt$ht
birthwt$btw
birthwt$bwt
birthwt$ui
birthwt$bwt
hist(birthwt$bwt)
hist(birthwt$lwt)
median(birthwt$lwd)
median(birthwt$lwt)
set.seed(101)
bebés.elegidos=sample(1:189,10,replace=TRUE)
bebés.elegidos
unique(bebés.elegidos)
muestra.bebés=birthwt[bebés.elegidos,]
muestra.bebés
library(BSDA)
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[1:3]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[1]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[2]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[3]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[4]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[5]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[6]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[7]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[8]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[9]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[10]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[1:9]]
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[3:9]]
rbind(SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[1]],SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")[[3]])
?SIGN.text
?SIGN.test
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")$Confidence.Intervals
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")$-Confidence.Intervals
wilcox.test(birthwt$lwt, mu=130, alternative="less")
?wilcox.test
wilcox.test(muestra.bebés$lwt, mu=130, alternative="less")
muestra.bebés$lwt-130
table(muestra.bebés$lwt-130)
set.seed(105)
bebés.elegidos=sample(1:189,10,replace=TRUE)
muestra.bebés=birthwt[bebés.elegidos,]
muestra.bebés
dim(muestra.bebés)
library(BSDA)
SIGN.test(muestra.bebés$lwt,md=130,alternative = "less")
wilcox.test(muestra.bebés$lwt, mu=130, alternative="less")
table(muestra.bebés$lwt-130)
median(muestra.bebés)
median(muestra.bebés$lwt)
muestra.bebés$lwt
table(muestra.bebés$lwt-130)
muestra.bebés$lwt
set.seed(111)
bebés.elegidos=sample(1:189,10,replace=TRUE)
bebés.elegidos
bebés.elegidos$lwt
muestra.bebés=birthwt[bebés.elegidos,]
muestra.bebés$lwt
unique(muestra.bebés$lwt)
set.seed(1000)
bebés.elegidos=sample(1:189,10,replace=TRUE)
unique(bebés.elegidos)
bebés.elegidos$lwt
muestra.bebés=birthwt[bebés.elegidos,]
muestra.bebés$lwt
unique(muestra.bebés$lwt)
shapiro.test(birthwt$bwt)
shapiro.test(birthwt$bwt[birthwt$race==1])
shapiro.test(birthwt$bwt[birthwt$race==2])
shapiro.test(birthwt$lwt[birthwt$race==2])
shapiro.test(birthwt$lwt[birthwt$race==1])
median(birthwt$lwt[birthwt$race==1])
median(birthwt$lwt[birthwt$race==2])
median(birthwt$lwt[birthwt$race==3])
?birthwt
?wilcox.test
birthwt[race==1,]
birthwt[birthwt$race==1,]
sample(birthwt[birthwt$race==1,],10)
birthwt[birthwt$race==1,]
rownames(birthwt[birthwt$race==1,])
etiquetas.bebés.madres.raza.blanca =  rownames(birthwt[birthwt$race==1,])
etiquetas.bebés.madres.raza.otras =  rownames(birthwt[birthwt$race==3,])
bebés.elegidos.madres.raza.blanca = sample(etiquetas.bebés.madres.raza.blanca,10,replace=TRUE)
bebés.elegidos.madres.raza.blanca
birthwt[bebés.elegidos.madres.raza.blanca,]
muestra.bebés.madres.raza.blanca = birthwt[bebés.elegidos.madres.raza.blanca,]
muestra.bebés.madres.raza.otras = birthwt[bebés.elegidos.madres.raza.otras,]
bebés.elegidos.madres.raza.otras = sample(etiquetas.bebés.madres.raza.otras,10,
replace=TRUE)
bebés.elegidos.madres.raza.blanca = sample(etiquetas.bebés.madres.raza.blanca,10,
replace=TRUE)
bebés.elegidos.madres.raza.otras = sample(etiquetas.bebés.madres.raza.otras,10,
replace=TRUE)
wilcox.test(muestra.bebés.madres.raza.blanca$lwt,muestra.bebés.madres.raza.otras$lwt,alternative="greater")
bebés.elegidos.madres.raza.otras = sample(etiquetas.bebés.madres.raza.otras,10,
replace=TRUE)
muestra.bebés.madres.raza.otras = birthwt[bebés.elegidos.madres.raza.otras,]
wilcox.test(muestra.bebés.madres.raza.blanca$lwt,muestra.bebés.madres.raza.otras$lwt,alternative="greater")
muestra.bebés.madres.raza.blanca$lwt
muestra.bebés.madres.raza.otras$lwt
table(muestra.bebés.madres.raza.otras$lwt)
table(muestra.bebés.madres.raza.blancas$lwt)
table(muestra.bebés.madres.raza.blanca$lwt)
set.seed(1001)
bebés.elegidos.madres.raza.blanca = sample(etiquetas.bebés.madres.raza.blanca,10,
replace=TRUE)
bebés.elegidos.madres.raza.otras = sample(etiquetas.bebés.madres.raza.otras,10,
replace=TRUE)
muestra.bebés.madres.raza.blanca = birthwt[bebés.elegidos.madres.raza.blanca,]
muestra.bebés.madres.raza.otras = birthwt[bebés.elegidos.madres.raza.otras,]
median(muestra.bebés.madres.raza.blanca$lwt)
median(muestra.bebés.madres.raza.otras$lwt)
shapiro.test(iris$Sepal.Length)
shapiro.test(iris$Petal.Length)
shapiro.test(iris$Petal.Width)
shapiro.test(iris$Sepal.Width)
hist(iris$Sepal.Width)
var(iris$Sepal.Width)
flores.elegidas
length(flores.elegidas)
set.seed(230)
flores.elegidas=sample(1:150,40,replace=TRUE)
length(flores.elegidas)
flores.elegidas
set.seed(2019)
flores.elegidas=sample(1:150,40,replace=TRUE)
muestra.flores.elegidas = iris[flores.elegidas,]
muestra.flores.elegidas
library(TeachingDemos)
shapiro.test(iris$Sepal.Width)
sigma.test(muestra.flores.elegidas$Sepal.Width,sigmasq = 0.2,alternative = "less")
sigma.test(muestra.flores.elegidas$Sepal.Width,sigmasq = 0.2,alternative = "less")$conf.int
round(sigma.test(muestra.flores.elegidas$Sepal.Width,sigmasq = 0.2,alternative = "less"),4)
birthwt$bwt
shapiro.test(birthwt$bwt)
shapiro.test(birthwt$bwt[birthwt$race==1])
shapiro.test(birthwt$bwt[birthwt$race==2])
var.test(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length)
shapiro.test(muestra.setosa$Petal.Length)
shapiro.test(muestra.versicolor$Petal.Length)
fligner.test(list(muestra.setosa$Petal.Length,muestra.versicolor$Petal.Length))
data()
aids
birthwt$smoke
mean(birthwt$smoke)
dim(birthwt)
set.seed(1001)
madres.elegidas(1:189,30,replace=TRUE)
madres.elegidas=sample(1:189,30,replace=TRUE)
table(muestra.madres.elegidas$smoke)
muestra.madres.elegidas=birthwt[madres.elegidas,]
table(muestra.madres.elegidas$smoke)
binom.test(table(muestra.madres.elegidas$smoke)[1],30,p=0.3,alternative="greater")
madres.raza.blanca = rownames(birthwt[birthwt$race==1,])
sample(birthwt)
?birthwt
madres.raza.blanca
madres.elegidas.blanca=sample(madres.raza.blanca,50,replace=TRUE)
madres.elegidas.blanca
sort(madres.elegidas.blanca)
sort(as.numeric(madres.elegidas.blanca))
muestra.madres.raza.blanca = birthwt[madres.elegidas.blanca,]
muestra.madres.raza.negra = birthwt[madres.elegidas.negra,]
set.seed(2000)
madres.elegidas.blanca=sample(madres.raza.blanca,50,replace=TRUE)
madres.elegidas.negra = sample(madres.raza.negra,50, replace=TRUE)
madres.raza.blanca = rownames(birthwt[birthwt$race==1,])
madres.raza.negra = rownames(birthwt[birthwt$race==2,])
set.seed(2000)
madres.elegidas.blanca=sample(madres.raza.blanca,50,replace=TRUE)
madres.elegidas.negra = sample(madres.raza.negra,50, replace=TRUE)
muestra.madres.raza.blanca = birthwt[madres.elegidas.blanca,]
muestra.madres.raza.negra = birthwt[madres.elegidas.negra,]
table(muestra.madres.raza.blanca)$smoke
muestra.madres.raza.blanca
table(muestra.madres.raza.blanca$smoke)
table(muestra.madres.raza.negra$smoke)
table(muestra.madres.raza.blanca$smoke)
table(muestra.madres.raza.negra$smoke)
table(birthwt$smoke,birthwt$race)
muestra.bebés.madres.raza.blanca
muestra.bebés.madres.raza.negra
muestra.madres.raza.blanca
muestra.madres.raza.negra
muestra.birthwt=  rbind(muestra.madres.raza.blanca,muestra.madres.raza.negra)
table(muestra.birthwt$smoke,muestra.birthwt$race)
muestra.madres = rbind(muestra.madres.raza.blanca,muestra.madres.raza.negra)
table(muestra.madres$smoke,muestra.madres$race)
(matriz.fisher=table(muestra.madres$smoke,muestra.madres$race))
matriz.fisher = rbind(matriz.fisher[,2],matriz.fisher[,1])
matriz.fisher
(matriz.fisher=table(muestra.madres$smoke,muestra.madres$race))
(matriz.fisher = rbind(matriz.fisher[2,],matriz.fisher[1,]))
fisher.test(matriz.fisher)
fisher.test(matriz.fisher)
fisher.test(matriz.fisher)$conf.int
birthwt$smoke
birthwt$ht
dim(birthwt)
muestra.madres.prop.empar = birthwt[madres.elegidas.prop.empar,]
madres.elegidas.prop.empar = sample(1:189,30,replace=TRUE)
muestra.madres.prop.empar = birthwt[madres.elegidas.prop.empar,]
set.seed(333)
madres.elegidas.prop.empar = sample(1:189,30,replace=TRUE)
muestra.madres.prop.empar = birthwt[madres.elegidas.prop.empar,]
table(muestra.madres.prop.empar$smoke,muestra.madres.prop.empar$ht)
t(table(muestra.madres.prop.empar$smoke,muestra.madres.prop.empar$ht))
(matriz.prop.empar = table(muestra.madres.prop.empar$smoke,muestra.madres.prop.empar$ht))
matriz.prop.empar = rbind(matriz.prop.empar[1,],matriz.prop.empar[2,])
matriz.prop.empar = cbind(matriz.prop.empar[,1],matriz.prop.empar[,2])
matriz.prop.empar
matriz.prop.empar = rbind(matriz.prop.empar[2,],matriz.prop.empar[1,])
matriz.prop.empar = cbind(matriz.prop.empar[,2],matriz.prop.empar[,1])
matriz.prop.empar
matriz.prop.empar
mcnemar.test(matriz.prop.empar)
?binom.test
binom.test(éxitos,n,p=0.5)
(éxitos=matriz.prop.empar[2,1])
binom.test(éxitos,n,p=0.5)
