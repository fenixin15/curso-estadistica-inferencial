---
title: 'Manipulación de datos: data wrangling  con tidyverse'
author: "Ricardo Alberich Martí, Juan Gabriel Gomila Salas,Arnau Mir Torres."
date: "null"
output:
  beamer_presentation: default
  powerpoint_presentation: default
---




## Introducción a las `tibbles`

* Para tratar, modelar y visualizar datos, es conveniente tenerlos en forma de tablas bien definidas o denominadas `tibbles`.

* Para poder usar las `tibbles`, primeramente hay que instalar y cargar la librería `tidyverse`

```{r}
library(tidyverse)
```

## Introducción a las `tibbles`

Para introducir las `tibbles` usaremos la tabla de datos de ejemplo del curso: *hcc_data.tsv*:
```{r}
datos.tibble=read_tsv("../datasets/segundo\ dataset/hcc_data.tsv")
```

La tabla de datos anterior consta de 165 pacientes (filas) y 50 variables (columnas) que nos dan características médicas de los pacientes.

## Analizando los datos

* La funciones tipo `parse` nos permiten transformar nuestros datos, supuestos éstos de tipo carácter, (en caso de no serlo, habrá que aplicar previamente la función `as.character`) en datos de un determinado tipo:
  * `parse_logical()` y `parse_integer()`: transforman a variables lógicas y enteras.
  * `parse_double()` y `parse_number()`: transforman a variable numéricas.
  * `parse_character()`: transforma a variable carácter.
  * `parse_factor() `: transforma a variable factor.

## Analizando los datos

La función `guess_parser(var)` nos dice el tipo de variable interpreta `R` de la variable *var*. Por ejemplo, si hacemos:
```{r}
guess_parser(datos.tibble$`Gamma glutamyl transferase (U/L)`)
```
vemos que `R` interpreta que la variable `Gamma glutamil transferasa` es una variable numérica.

## Transformación de datos

* La función `filter()` te permite elegir aquellas filas que verifiquen una cierta condición:
```{r}
datos.hombres.alcohol=filter(datos.tibble,Gender==1, Alcohol==1)
```

* Cuando filtramos los datos, los datos en los que haya *NA*, no serán filtrados. En caso de querer tenerlos en cuenta, hay que usar la función `is.na`.

* La función `arrange()` ordena los datos. Por ejemplo, si queremos ordenar nuestros pacientes por el total de la Bilirrubina y, en caso de empate, por el número de Leucocitos, hay que hacer:
```{r}
datos.tibble.ordenados=arrange(datos.tibble,`Total Bilirubin(mg/dL)`,`Leukocytes(G/L)`)
```

## Transformación de datos

* Si en lugar de seleccionar pacientes o filas, queremos seleccionar variables o columnas, hemos de usar la función `select()`:
```{r}
datos.tibble3= select(datos.tibble,Gender, 
          `Haemoglobin (g/dL)`,`Leukocytes(G/L)`,`Total Bilirubin(mg/dL)` )
```

* La función `mutate` nos permite añadir variables nuevas a nuestra tabla de datos:
```{r}
datos.tibble.nivel.hemoglobina.estandarizado = mutate(datos.tibble,
    nivel.hemoglogina.est=(`Haemoglobin (g/dL)`-mean(datos.tibble$`Haemoglobin (g/dL)`,
        na.rm=TRUE))/sd(datos.tibble$`Haemoglobin (g/dL)`,na.rm=TRUE))
```

## Transformación de datos

* Si sólo queremos ver la nueva variable, usamos la variable `transmute`:
```{r}
solo.nivel.hemoglobina.est = transmute(datos.tibble,nivel.hemoglogina.est=
      (`Haemoglobin (g/dL)`-mean(datos.tibble$`Haemoglobin (g/dL)`,na.rm=TRUE))/
                                sd(datos.tibble$`Haemoglobin (g/dL)`,na.rm=TRUE))
```

## Ordenación de datos

* Queremos una tabla de datos que nos indique el nivel de bilirrubina de cada paciente pero queremos en filas distintas la bilirrubina total de la directa: hay que usar la función `gather`:
```{r}
datos.tibble4=select(datos.tibble,`Total Bilirubin(mg/dL)`,`Direct Bilirubin (mg/dL)`)
datos.tibble4 = mutate(datos.tibble4,número.paciente=1:165)
tipo.bilirrubina=as.factor(c("Total Bilirubin(mg/dL)","Direct Bilirubin (mg/dL)"))
datos.tibble5 = datos.tibble4 %>%
  gather(`Total Bilirubin(mg/dL)`,`Direct Bilirubin (mg/dL)`,key=tipo.bilirrubina,
         value="bilirrubina")
```

## Ordenación de datos

* La operación inversa a `gather` es `spread`. Veamos cómo obtener la tabla de datos `datos.tibble4` a partir de la nueva tabla de datos creada con `gather`:
```{r}
datos.tibble6 = datos.tibble5 %>%
  spread(key = tipo.bilirrubina , value=bilirrubina)
```

## Ordenación de datos

* Si queremos separar los valores de una columna por un carácter, tenemos que usar la función `separate`. Ejemplo: separación de la parte entera de la decimal de la variable *Hemoglobina*:
```{r}
datos.tibble.gender.hemog = select(datos.tibble,Gender,`Haemoglobin (g/dL)`)
datos.tibble7 = datos.tibble.gender.hemog %>%
  separate(`Haemoglobin (g/dL)`,sep="\\.",into=c("Hemog.entera","Hemog.decimal"))
```

## Ordenación de datos

La operación inversa de separar es unir. La función que realiza esta operación es `unite`. Veámoslo en acción usando la tabla de datos creada anteriormente para crear la variable *Hemoglobina* juntando la parte entera de la decimal:
```{r}
datos.tibble.unir.hemog= datos.tibble7 %>%
  unite(hemoglobina,Hemog.entera,Hemog.decimal,sep=".")
```